using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Linq;
using System.Text;

namespace Dreamine.MVVM.Generators
{
	/// <summary>
	/// 📌 [DreamineEntry] 속성이 부여된 클래스에 대해 WPF App.xaml.cs 구조를 자동 생성해주는 Source Generator입니다.
	/// </summary>
	[Generator]
	public sealed class DreamineEntryGenerator : IIncrementalGenerator
	{
		public void Initialize(IncrementalGeneratorInitializationContext context)
		{
			// Attribute 타입 미리 확보
			var entryAttrSymbol = context.CompilationProvider
				.Select<Compilation, INamedTypeSymbol?>(static (c, _) =>
					c.GetTypeByMetadataName("Dreamine.MVVM.Attributes.DreamineEntryAttribute"));

			// 후보 탐색 + Symbol 비교
			var candidates = context.SyntaxProvider
				.CreateSyntaxProvider(
					static (s, _) => s is ClassDeclarationSyntax cds && cds.AttributeLists.Count > 0,
					static (ctx, _) => ctx
				)
				.Combine(entryAttrSymbol)
				.Select(static (pair, _) =>
				{
					var ctx = pair.Left;
					var attrSymbol = pair.Right;
					return GetEntryCandidateSymbolBased(ctx, attrSymbol);
				})
				.Where(static x => x is not null)
				.Select(static (x, _) => x!.Value)
				.Collect();

			// 코드 생성
			context.RegisterSourceOutput(candidates, static (spc, list) =>
			{
				foreach (var (classSymbol, ns) in list)
				{
					var rootNs = ns.Split('.')[0];  // ex: DreamineApp
					var className = classSymbol.Name;

					var sb = new StringBuilder();
					sb.AppendLine("// <auto-generated />");
					sb.AppendLine("using System.Windows;");
					sb.AppendLine("using Dreamine.MVVM.Core;");
					sb.AppendLine("using Dreamine.MVVM.Locators;");
					sb.AppendLine($"using {rootNs}.Interfaces;");
					sb.AppendLine($"using {rootNs}.Managers;");
					sb.AppendLine();
					sb.AppendLine($"namespace {ns}");
					sb.AppendLine("{");
					sb.AppendLine($"    public partial class {className} : Application");
					sb.AppendLine("    {");
					sb.AppendLine("        protected override void OnStartup(StartupEventArgs e)");
					sb.AppendLine("        {");
					sb.AppendLine("            base.OnStartup(e);");
					sb.AppendLine("            var rootAssembly = typeof(App).Assembly;");
					sb.AppendLine("            DMContainer.RegisterSingleton<IViewManager>(new ViewManager());");
					sb.AppendLine("            DMContainer.AutoRegisterAll(rootAssembly);");
					sb.AppendLine("            ViewModelLocator.RegisterAll(rootAssembly);");
					sb.AppendLine("            EventManager.RegisterClassHandler(");
					sb.AppendLine("                typeof(FrameworkElement),");
					sb.AppendLine("                FrameworkElement.LoadedEvent,");
					sb.AppendLine("                new RoutedEventHandler(AttachViewModelIfExists));");
					sb.AppendLine("        }");
					sb.AppendLine();
					sb.AppendLine("        private static void AttachViewModelIfExists(object sender, RoutedEventArgs e)");
					sb.AppendLine("        {");
					sb.AppendLine("            if (sender is FrameworkElement view && view.DataContext == null)");
					sb.AppendLine("            {");
					sb.AppendLine("                var vm = ViewModelLocator.Resolve(view.GetType());");
					sb.AppendLine("                if (vm != null) view.DataContext = vm;");
					sb.AppendLine("            }");
					sb.AppendLine("        }");
					sb.AppendLine("    }");
					sb.AppendLine("}");

					spc.AddSource($"{className}_DreamineApp.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
				}
			});
		}

		/// <summary>
		/// [DreamineEntry] 속성이 부여된 클래스 필터링 (Symbol 기반)
		/// </summary>
		private static (INamedTypeSymbol Symbol, string Namespace)? GetEntryCandidateSymbolBased(
			GeneratorSyntaxContext ctx, INamedTypeSymbol? entryAttrSymbol)
		{
			if (ctx.Node is not ClassDeclarationSyntax cds)
				return null;

			var classSymbol = ctx.SemanticModel.GetDeclaredSymbol(cds) as INamedTypeSymbol;
			if (classSymbol == null) return null;

			foreach (var attr in classSymbol.GetAttributes())
			{
				if (SymbolEqualityComparer.Default.Equals(attr.AttributeClass, entryAttrSymbol))
				{
					var ns = classSymbol.ContainingNamespace.ToDisplayString();
					return (classSymbol, ns);
				}
			}

			return null;
		}
	}
}
